<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GeekHomeInside</title><link>/</link><description>Recent content on GeekHomeInside</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 25 Jan 2019 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>About</title><link>/about/</link><pubDate>Fri, 25 Jan 2019 00:00:00 +0000</pubDate><guid>/about/</guid><description>Hi there I'm GuiAdCo.
You can look this links to knwon more about me:
Linkedin Github Gitlab</description></item><item><title>ActiniumBox</title><link>/post/actiniumbox/</link><pubDate>Fri, 25 Jan 2019 00:00:00 +0000</pubDate><guid>/post/actiniumbox/</guid><description>Github Packer This repository contains files used by Packer to create images for Vagrant Cloud
Variables available Optional variables and their defaults: Variables Value Description VAGRANT_TOKEN &amp;ldquo;{{env VAGRANT_TOKEN}}&amp;rdquo; Only when you want to upload in vagrant-cloud readme_vagrant CentOS 7.5.1804 This the desciption you can see on vagrant cloud organization actinium The Organization use in Vagrant Cloud version 1.</description></item><item><title>Allspark</title><link>/post/allspark/</link><pubDate>Fri, 25 Jan 2019 00:00:00 +0000</pubDate><guid>/post/allspark/</guid><description>Github Docker based developer toolbox, see the Documentation for informations.</description></item><item><title>atomic-boxes</title><link>/post/atomic-boxes/</link><pubDate>Fri, 25 Jan 2019 00:00:00 +0000</pubDate><guid>/post/atomic-boxes/</guid><description>https://github.com/Kreelio/atomic-boxes atomic-boxes Vagrant boxes with Atomic OS like VMware-Photon / CoreOS / Feroda-CoreOS
This repository contains files used by Packer to create images for Vagrant Cloud with Atomic OS
Table of Contents Overview Requirements Building Overview CoreOS provides Vagrant boxes for each release, in formats compatible with the VirtualBox and VMware Fusion providers.
However, they do not (at the time of this writing) provide a Vagrant box up-to-date for use with the libvirt provider.</description></item><item><title>AWS Gitlab Stack</title><link>/post/aws_gitlab/</link><pubDate>Fri, 25 Jan 2019 00:00:00 +0000</pubDate><guid>/post/aws_gitlab/</guid><description>Work In Progress AWS Gitlab Stack TF 12
terraform plan for gitlab and gitlab-runner on aws
This plan use exclusively cloudposse modules
https://github.com/cloudposse/terraform-aws-acm-request-certificate https://github.com/cloudposse/terraform-aws-ec2-autoscale-group https://github.com/cloudposse/terraform-aws-rds-cluster https://github.com/cloudposse/terraform-aws-iam-role https://github.com/cloudposse/terraform-aws-route53-alias</description></item><item><title>AWS Gitlab Stack Documentation</title><link>/post/aws_gitlab_documentation/</link><pubDate>Fri, 25 Jan 2019 00:00:00 +0000</pubDate><guid>/post/aws_gitlab_documentation/</guid><description>Work In Progress Using Hugo Framework with Hugo-learn-themes</description></item><item><title>GeekHomeInside Tutorials</title><link>/post/tutorial/</link><pubDate>Fri, 25 Jan 2019 00:00:00 +0000</pubDate><guid>/post/tutorial/</guid><description> Github
GeekHomeInside Tutorial Website</description></item><item><title>Hugo-demo</title><link>/post/hugo-demo/</link><pubDate>Fri, 25 Jan 2019 00:00:00 +0000</pubDate><guid>/post/hugo-demo/</guid><description>
hugo-demo Hugo Demo Site with meghna-hugo themes and deploy by CircleCI into Github Pages: Demo
How to contibute CONTRIBUTING</description></item><item><title>nginx-example-ansible</title><link>/post/nginx-example-ansible/</link><pubDate>Fri, 25 Jan 2019 00:00:00 +0000</pubDate><guid>/post/nginx-example-ansible/</guid><description>Github NGINX installer This installer use ansible to setup Nginx on a Linux environment using Docker 18.03.1 to as a reverse proxy for Jfrog Artifactory
Playbooks install.yml Install Nginx on the machine
Install from an Nginx release For each install do:
Generate an ssh key ssh-keygen copy the private key to the remote server ssh-copy-id -i ssh/id_rsa &amp;lt;your user&amp;gt;@&amp;lt;hostname.domainename&amp;gt; for example: ssh-copy-id -i ~/.</description></item><item><title>OneForAll</title><link>/post/oneforall/</link><pubDate>Fri, 25 Jan 2019 00:00:00 +0000</pubDate><guid>/post/oneforall/</guid><description> Github
Documentation</description></item><item><title>packer-example-with-vmwaretools</title><link>/post/packer-example-with-vmwaretools/</link><pubDate>Fri, 25 Jan 2019 00:00:00 +0000</pubDate><guid>/post/packer-example-with-vmwaretools/</guid><description>Github
Packer CentOS This repository contains files used by [Packer][packer] to create CentOS images for VMware (vmware) and vbox
Variables available Optional variables and their defaults: build_number = {{timestamp}} centos_arch = x86_64 disk_size = 10000 headless = true iso_base_url = iso iso_checksum_type = sha256 password = password timeout = 30m username = root In addition, several variables files are available in order to precise which version of CentOS you want to use.</description></item><item><title>Python-Jinja2 readme generator</title><link>/post/jinja2-readme/</link><pubDate>Fri, 25 Jan 2019 00:00:00 +0000</pubDate><guid>/post/jinja2-readme/</guid><description>(WIP) - Python-Jinja2 readme generator https://github.com/ccl-consulting/jinja2-readme</description></item><item><title>Terraform GCP Nested Virtualization</title><link>/post/terraform-gcp-europe-nested-virt/</link><pubDate>Fri, 25 Jan 2019 00:00:00 +0000</pubDate><guid>/post/terraform-gcp-europe-nested-virt/</guid><description>Github
terraform on GCP europe on Nested Virtual Machine Init The Devops Team use this terraform plan to provision GCP with a CI/CD to test allspark.
This demonstrates the provisioning of a single compute VM(2vCPU/7.5Go) in GCP inside a custom created VPC with firewall rules attached to it.
$ terraform init This will create the terraform.tfstate file
Running it $ terraform plan -var &amp;#39;project-name=mykey&amp;#39; -var &amp;#39;vmcount=mykey&amp;#39; -var &amp;#39;region=mykey&amp;#39; -var &amp;#39;instance-name=mykey&amp;#39; -var &amp;#39;subnetwork-region=mykey&amp;#39; -var &amp;#39;network=mykey&amp;#39; -var &amp;#39;vm_type=mykey&amp;#39; -var &amp;#39;os=mykey&amp;#39; $ terraform apply -var &amp;#39;project-name=mykey&amp;#39; -var &amp;#39;vmcount=mykey&amp;#39; -var &amp;#39;region=mykey&amp;#39; -var &amp;#39;instance-name=mykey&amp;#39; -var &amp;#39;subnetwork-region=mykey&amp;#39; -var &amp;#39;network=mykey&amp;#39; -var &amp;#39;vm_type=mykey&amp;#39; -var &amp;#39;os=mykey&amp;#39; Variable Variable Value - Sample Description project-name $GCP_PROJECT-Name Name of your GCP project vmcount 1 Number of VM that you want to provision region See Appendix Name of the GCP regions instance-name AllSpark-foo-1 Name given to your instance network allspark-network Name of your VPC subnetwork-region See Appendix Name of the subnetwork of your VPC vm_type See Appendix The size of the VM you want to provision os See Appendix The Operating System you want to provision image-name actiniumimg disk-name actiniumdisk Appendix Supported Operating System Operating System GCP name CentOS 7 - Release 7.</description></item></channel></rss>